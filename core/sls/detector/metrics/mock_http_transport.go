// Code generated by MockGen. DO NOT EDIT.
// Source: http_transport.go

// Package metrics is a generated GoMock package.
package metrics

import (
	http "net/http"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockHTTPCollector is a mock of HTTPCollector interface.
type MockHTTPCollector struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPCollectorMockRecorder
}

// MockHTTPCollectorMockRecorder is the mock recorder for MockHTTPCollector.
type MockHTTPCollectorMockRecorder struct {
	mock *MockHTTPCollector
}

// NewMockHTTPCollector creates a new mock instance.
func NewMockHTTPCollector(ctrl *gomock.Controller) *MockHTTPCollector {
	mock := &MockHTTPCollector{ctrl: ctrl}
	mock.recorder = &MockHTTPCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPCollector) EXPECT() *MockHTTPCollectorMockRecorder {
	return m.recorder
}

// IncDetectorCounter mocks base method.
func (m *MockHTTPCollector) IncDetectorCounter(clientName, url string, statusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncDetectorCounter", clientName, url, statusCode)
}

// IncDetectorCounter indicates an expected call of IncDetectorCounter.
func (mr *MockHTTPCollectorMockRecorder) IncDetectorCounter(clientName, url, statusCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncDetectorCounter", reflect.TypeOf((*MockHTTPCollector)(nil).IncDetectorCounter), clientName, url, statusCode)
}

// ObserveDetectorLatency mocks base method.
func (m *MockHTTPCollector) ObserveDetectorLatency(clientName, url string, statusCode int, startTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveDetectorLatency", clientName, url, statusCode, startTime)
}

// ObserveDetectorLatency indicates an expected call of ObserveDetectorLatency.
func (mr *MockHTTPCollectorMockRecorder) ObserveDetectorLatency(clientName, url, statusCode, startTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveDetectorLatency", reflect.TypeOf((*MockHTTPCollector)(nil).ObserveDetectorLatency), clientName, url, statusCode, startTime)
}

// MockHTTPRoundTripper is a mock of HTTPRoundTripper interface.
type MockHTTPRoundTripper struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPRoundTripperMockRecorder
}

// MockHTTPRoundTripperMockRecorder is the mock recorder for MockHTTPRoundTripper.
type MockHTTPRoundTripperMockRecorder struct {
	mock *MockHTTPRoundTripper
}

// NewMockHTTPRoundTripper creates a new mock instance.
func NewMockHTTPRoundTripper(ctrl *gomock.Controller) *MockHTTPRoundTripper {
	mock := &MockHTTPRoundTripper{ctrl: ctrl}
	mock.recorder = &MockHTTPRoundTripperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPRoundTripper) EXPECT() *MockHTTPRoundTripperMockRecorder {
	return m.recorder
}

// RoundTrip mocks base method.
func (m *MockHTTPRoundTripper) RoundTrip(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoundTrip", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoundTrip indicates an expected call of RoundTrip.
func (mr *MockHTTPRoundTripperMockRecorder) RoundTrip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoundTrip", reflect.TypeOf((*MockHTTPRoundTripper)(nil).RoundTrip), arg0)
}
