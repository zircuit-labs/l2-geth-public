// Code generated by MockGen. DO NOT EDIT.
// Source: quarantiner.go

// Package sls is a generated GoMock package.
package sls

import (
	context "context"
	reflect "reflect"

	common "github.com/zircuit-labs/l2-geth-public/common"
	model "github.com/zircuit-labs/l2-geth-public/core/sls/model"
	types "github.com/zircuit-labs/l2-geth-public/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStorage) Add(ctx context.Context, quarantine *model.Quarantine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, quarantine)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockStorageMockRecorder) Add(ctx, quarantine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStorage)(nil).Add), ctx, quarantine)
}

// PendingRelease mocks base method.
func (m *MockStorage) PendingRelease(ctx context.Context, quarantineType model.QuarantineType) ([]*model.Quarantine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingRelease", ctx, quarantineType)
	ret0, _ := ret[0].([]*model.Quarantine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingRelease indicates an expected call of PendingRelease.
func (mr *MockStorageMockRecorder) PendingRelease(ctx, quarantineType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingRelease", reflect.TypeOf((*MockStorage)(nil).PendingRelease), ctx, quarantineType)
}

// Quarantined mocks base method.
func (m *MockStorage) Quarantined(ctx context.Context, from *common.Address) ([]*model.Quarantine, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quarantined", ctx, from)
	ret0, _ := ret[0].([]*model.Quarantine)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Quarantined indicates an expected call of Quarantined.
func (mr *MockStorageMockRecorder) Quarantined(ctx, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quarantined", reflect.TypeOf((*MockStorage)(nil).Quarantined), ctx, from)
}

// Release mocks base method.
func (m *MockStorage) Release(ctx context.Context, txHash common.Hash, reason string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", ctx, txHash, reason)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release.
func (mr *MockStorageMockRecorder) Release(ctx, txHash, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockStorage)(nil).Release), ctx, txHash, reason)
}

// MockSlsQuarantiner is a mock of SlsQuarantiner interface.
type MockSlsQuarantiner struct {
	ctrl     *gomock.Controller
	recorder *MockSlsQuarantinerMockRecorder
}

// MockSlsQuarantinerMockRecorder is the mock recorder for MockSlsQuarantiner.
type MockSlsQuarantinerMockRecorder struct {
	mock *MockSlsQuarantiner
}

// NewMockSlsQuarantiner creates a new mock instance.
func NewMockSlsQuarantiner(ctrl *gomock.Controller) *MockSlsQuarantiner {
	mock := &MockSlsQuarantiner{ctrl: ctrl}
	mock.recorder = &MockSlsQuarantinerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlsQuarantiner) EXPECT() *MockSlsQuarantinerMockRecorder {
	return m.recorder
}

// PendingRelease mocks base method.
func (m *MockSlsQuarantiner) PendingRelease(ctx context.Context, quarantineType model.QuarantineType) ([]*model.Quarantine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingRelease", ctx, quarantineType)
	ret0, _ := ret[0].([]*model.Quarantine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingRelease indicates an expected call of PendingRelease.
func (mr *MockSlsQuarantinerMockRecorder) PendingRelease(ctx, quarantineType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingRelease", reflect.TypeOf((*MockSlsQuarantiner)(nil).PendingRelease), ctx, quarantineType)
}

// Release mocks base method.
func (m *MockSlsQuarantiner) Release(ctx context.Context, transaction *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockSlsQuarantinerMockRecorder) Release(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockSlsQuarantiner)(nil).Release), ctx, transaction)
}

// SendToQuarantine mocks base method.
func (m *MockSlsQuarantiner) SendToQuarantine(ctx context.Context, transaction *types.Transaction, detector, reason string, loss uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToQuarantine", ctx, transaction, detector, reason, loss)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToQuarantine indicates an expected call of SendToQuarantine.
func (mr *MockSlsQuarantinerMockRecorder) SendToQuarantine(ctx, transaction, detector, reason, loss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToQuarantine", reflect.TypeOf((*MockSlsQuarantiner)(nil).SendToQuarantine), ctx, transaction, detector, reason, loss)
}
