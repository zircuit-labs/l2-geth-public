// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package catalyst is a generated GoMock package.
package catalyst

import (
	context "context"
	reflect "reflect"

	sls "github.com/zircuit-labs/l2-geth-public/core/sls"
	types "github.com/zircuit-labs/l2-geth-public/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockdetectorManager is a mock of detectorManager interface.
type MockdetectorManager struct {
	ctrl     *gomock.Controller
	recorder *MockdetectorManagerMockRecorder
}

// MockdetectorManagerMockRecorder is the mock recorder for MockdetectorManager.
type MockdetectorManagerMockRecorder struct {
	mock *MockdetectorManager
}

// NewMockdetectorManager creates a new mock instance.
func NewMockdetectorManager(ctrl *gomock.Controller) *MockdetectorManager {
	mock := &MockdetectorManager{ctrl: ctrl}
	mock.recorder = &MockdetectorManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdetectorManager) EXPECT() *MockdetectorManagerMockRecorder {
	return m.recorder
}

// ShouldBeQuarantined mocks base method.
func (m *MockdetectorManager) ShouldBeQuarantined(arg0 context.Context, arg1 *types.Transaction) (sls.ManagerResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldBeQuarantined", arg0, arg1)
	ret0, _ := ret[0].(sls.ManagerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldBeQuarantined indicates an expected call of ShouldBeQuarantined.
func (mr *MockdetectorManagerMockRecorder) ShouldBeQuarantined(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldBeQuarantined", reflect.TypeOf((*MockdetectorManager)(nil).ShouldBeQuarantined), arg0, arg1)
}

// Stop mocks base method.
func (m *MockdetectorManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockdetectorManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockdetectorManager)(nil).Stop))
}

// Mockrejector is a mock of rejector interface.
type Mockrejector struct {
	ctrl     *gomock.Controller
	recorder *MockrejectorMockRecorder
}

// MockrejectorMockRecorder is the mock recorder for Mockrejector.
type MockrejectorMockRecorder struct {
	mock *Mockrejector
}

// NewMockrejector creates a new mock instance.
func NewMockrejector(ctrl *gomock.Controller) *Mockrejector {
	mock := &Mockrejector{ctrl: ctrl}
	mock.recorder = &MockrejectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrejector) EXPECT() *MockrejectorMockRecorder {
	return m.recorder
}

// RecordRejectedTx mocks base method.
func (m *Mockrejector) RecordRejectedTx(ctx context.Context, transaction *types.Transaction, detector, reason string, loss uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordRejectedTx", ctx, transaction, detector, reason, loss)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordRejectedTx indicates an expected call of RecordRejectedTx.
func (mr *MockrejectorMockRecorder) RecordRejectedTx(ctx, transaction, detector, reason, loss interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRejectedTx", reflect.TypeOf((*Mockrejector)(nil).RecordRejectedTx), ctx, transaction, detector, reason, loss)
}
