// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package engine

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/zircuit-labs/l2-geth-public/common"
	"github.com/zircuit-labs/l2-geth-public/core/types"
	"github.com/zircuit-labs/l2-geth-public/common/hexutil"
)

var _ = (*executionPayloadEnvelopeMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e ExecutionPayloadEnvelope) MarshalJSON() ([]byte, error) {
	type ExecutionPayloadEnvelope struct {
		ExecutionPayload      *ExecutableData      `json:"executionPayload"  gencodec:"required"`
		BlockValue            *hexutil.Big         `json:"blockValue"  gencodec:"required"`
		BlobsBundle           *BlobsBundleV1       `json:"blobsBundle"`
		Override              bool                 `json:"shouldOverrideBuilder"`
		RejectedPayloadM      *RejectedPayloadMeta `json:"rejectedPayloadM"`
		ExecutionErr          *ExecutionErr        `json:"executionErr,omitempty"`
		ParentBeaconBlockRoot *common.Hash         `json:"parentBeaconBlockRoot,omitempty"`
		L1Info *types.L1Info `json:"l1Info,omitempty"`

	}
	var enc ExecutionPayloadEnvelope
	enc.ExecutionPayload = e.ExecutionPayload
	enc.BlockValue = (*hexutil.Big)(e.BlockValue)
	enc.BlobsBundle = e.BlobsBundle
	enc.Override = e.Override
	enc.RejectedPayloadM = e.RejectedPayloadM
	enc.ExecutionErr = e.ExecutionErr
	enc.ParentBeaconBlockRoot = e.ParentBeaconBlockRoot
	enc.L1Info = e.L1Info
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ExecutionPayloadEnvelope) UnmarshalJSON(input []byte) error {
	type ExecutionPayloadEnvelope struct {
		ExecutionPayload      *ExecutableData      `json:"executionPayload"  gencodec:"required"`
		BlockValue            *hexutil.Big         `json:"blockValue"  gencodec:"required"`
		BlobsBundle           *BlobsBundleV1       `json:"blobsBundle"`
		Override              *bool                `json:"shouldOverrideBuilder"`
		RejectedPayloadM      *RejectedPayloadMeta `json:"rejectedPayloadM"`
		ExecutionErr          *ExecutionErr        `json:"executionErr,omitempty"`
		ParentBeaconBlockRoot *common.Hash         `json:"parentBeaconBlockRoot,omitempty"`
		L1Info *types.L1Info `json:"l1Info,omitempty"`
	}
	var dec ExecutionPayloadEnvelope
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ExecutionPayload == nil {
		return errors.New("missing required field 'executionPayload' for ExecutionPayloadEnvelope")
	}
	e.ExecutionPayload = dec.ExecutionPayload
	if dec.BlockValue == nil {
		return errors.New("missing required field 'blockValue' for ExecutionPayloadEnvelope")
	}
	e.BlockValue = (*big.Int)(dec.BlockValue)
	if dec.BlobsBundle != nil {
		e.BlobsBundle = dec.BlobsBundle
	}
	if dec.Override != nil {
		e.Override = *dec.Override
	}
	if dec.RejectedPayloadM != nil {
		e.RejectedPayloadM = dec.RejectedPayloadM
	}
	if dec.ExecutionErr != nil {
		e.ExecutionErr = dec.ExecutionErr
	}
	if dec.ParentBeaconBlockRoot != nil {
		e.ParentBeaconBlockRoot = dec.ParentBeaconBlockRoot
	}
	if dec.L1Info != nil {
		e.L1Info = dec.L1Info
	}
	return nil
}
