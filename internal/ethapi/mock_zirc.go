// Code generated by MockGen. DO NOT EDIT.
// Source: zirc.go

// Package ethapi is a generated GoMock package.
package ethapi

import (
	context "context"
	reflect "reflect"
	time "time"

	common "github.com/zircuit-labs/l2-geth-public/common"
	model "github.com/zircuit-labs/l2-geth-public/core/sls/model"
	gomock "github.com/golang/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// AddIntegrityListAddresses mocks base method.
func (m *Mockstorage) AddIntegrityListAddresses(ctx context.Context, addresses []common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIntegrityListAddresses", ctx, addresses)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIntegrityListAddresses indicates an expected call of AddIntegrityListAddresses.
func (mr *MockstorageMockRecorder) AddIntegrityListAddresses(ctx, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIntegrityListAddresses", reflect.TypeOf((*Mockstorage)(nil).AddIntegrityListAddresses), ctx, addresses)
}

// AddTrustListAddresses mocks base method.
func (m *Mockstorage) AddTrustListAddresses(ctx context.Context, addresses []common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrustListAddresses", ctx, addresses)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrustListAddresses indicates an expected call of AddTrustListAddresses.
func (mr *MockstorageMockRecorder) AddTrustListAddresses(ctx, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrustListAddresses", reflect.TypeOf((*Mockstorage)(nil).AddTrustListAddresses), ctx, addresses)
}

// AddressesInIntegrityList mocks base method.
func (m *Mockstorage) AddressesInIntegrityList(ctx context.Context, addresses []common.Address) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressesInIntegrityList", ctx, addresses)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressesInIntegrityList indicates an expected call of AddressesInIntegrityList.
func (mr *MockstorageMockRecorder) AddressesInIntegrityList(ctx, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressesInIntegrityList", reflect.TypeOf((*Mockstorage)(nil).AddressesInIntegrityList), ctx, addresses)
}

// AddressesInTrustList mocks base method.
func (m *Mockstorage) AddressesInTrustList(ctx context.Context, addresses []common.Address) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressesInTrustList", ctx, addresses)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddressesInTrustList indicates an expected call of AddressesInTrustList.
func (mr *MockstorageMockRecorder) AddressesInTrustList(ctx, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressesInTrustList", reflect.TypeOf((*Mockstorage)(nil).AddressesInTrustList), ctx, addresses)
}

// All mocks base method.
func (m *Mockstorage) All(ctx context.Context, offset, limit int, from *common.Address) ([]*model.Quarantine, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx, offset, limit, from)
	ret0, _ := ret[0].([]*model.Quarantine)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// All indicates an expected call of All.
func (mr *MockstorageMockRecorder) All(ctx, offset, limit, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*Mockstorage)(nil).All), ctx, offset, limit, from)
}

// FindByHash mocks base method.
func (m *Mockstorage) FindByHash(ctx context.Context, txHash common.Hash) (*model.Quarantine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHash", ctx, txHash)
	ret0, _ := ret[0].(*model.Quarantine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHash indicates an expected call of FindByHash.
func (mr *MockstorageMockRecorder) FindByHash(ctx, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHash", reflect.TypeOf((*Mockstorage)(nil).FindByHash), ctx, txHash)
}

// GetAdminAddresses mocks base method.
func (m *Mockstorage) GetAdminAddresses(ctx context.Context) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminAddresses", ctx)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminAddresses indicates an expected call of GetAdminAddresses.
func (mr *MockstorageMockRecorder) GetAdminAddresses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminAddresses", reflect.TypeOf((*Mockstorage)(nil).GetAdminAddresses), ctx)
}

// GetIntegrityListAddresses mocks base method.
func (m *Mockstorage) GetIntegrityListAddresses(ctx context.Context) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrityListAddresses", ctx)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntegrityListAddresses indicates an expected call of GetIntegrityListAddresses.
func (mr *MockstorageMockRecorder) GetIntegrityListAddresses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrityListAddresses", reflect.TypeOf((*Mockstorage)(nil).GetIntegrityListAddresses), ctx)
}

// GetTrustListAddresses mocks base method.
func (m *Mockstorage) GetTrustListAddresses(ctx context.Context) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrustListAddresses", ctx)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrustListAddresses indicates an expected call of GetTrustListAddresses.
func (mr *MockstorageMockRecorder) GetTrustListAddresses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrustListAddresses", reflect.TypeOf((*Mockstorage)(nil).GetTrustListAddresses), ctx)
}

// IsAdmin mocks base method.
func (m *Mockstorage) IsAdmin(ctx context.Context, address common.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", ctx, address)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockstorageMockRecorder) IsAdmin(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*Mockstorage)(nil).IsAdmin), ctx, address)
}

// IsQuarantined mocks base method.
func (m *Mockstorage) IsQuarantined(ctx context.Context, txHash common.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsQuarantined", ctx, txHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsQuarantined indicates an expected call of IsQuarantined.
func (mr *MockstorageMockRecorder) IsQuarantined(ctx, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsQuarantined", reflect.TypeOf((*Mockstorage)(nil).IsQuarantined), ctx, txHash)
}

// IsQuarantinedAndScanned mocks base method.
func (m *Mockstorage) IsQuarantinedAndScanned(ctx context.Context, txHash common.Hash) (*model.TransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsQuarantinedAndScanned", ctx, txHash)
	ret0, _ := ret[0].(*model.TransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsQuarantinedAndScanned indicates an expected call of IsQuarantinedAndScanned.
func (mr *MockstorageMockRecorder) IsQuarantinedAndScanned(ctx, txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsQuarantinedAndScanned", reflect.TypeOf((*Mockstorage)(nil).IsQuarantinedAndScanned), ctx, txHash)
}

// Quarantined mocks base method.
func (m *Mockstorage) Quarantined(ctx context.Context, from *common.Address) ([]*model.Quarantine, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quarantined", ctx, from)
	ret0, _ := ret[0].([]*model.Quarantine)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Quarantined indicates an expected call of Quarantined.
func (mr *MockstorageMockRecorder) Quarantined(ctx, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quarantined", reflect.TypeOf((*Mockstorage)(nil).Quarantined), ctx, from)
}

// Release mocks base method.
func (m *Mockstorage) Release(ctx context.Context, txHash common.Hash, reason string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", ctx, txHash, reason)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release.
func (mr *MockstorageMockRecorder) Release(ctx, txHash, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*Mockstorage)(nil).Release), ctx, txHash, reason)
}

// RemoveIntegrityListAddresses mocks base method.
func (m *Mockstorage) RemoveIntegrityListAddresses(ctx context.Context, addresses []common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveIntegrityListAddresses", ctx, addresses)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveIntegrityListAddresses indicates an expected call of RemoveIntegrityListAddresses.
func (mr *MockstorageMockRecorder) RemoveIntegrityListAddresses(ctx, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveIntegrityListAddresses", reflect.TypeOf((*Mockstorage)(nil).RemoveIntegrityListAddresses), ctx, addresses)
}

// RemoveTrustListAddresses mocks base method.
func (m *Mockstorage) RemoveTrustListAddresses(ctx context.Context, addresses []common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrustListAddresses", ctx, addresses)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTrustListAddresses indicates an expected call of RemoveTrustListAddresses.
func (mr *MockstorageMockRecorder) RemoveTrustListAddresses(ctx, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrustListAddresses", reflect.TypeOf((*Mockstorage)(nil).RemoveTrustListAddresses), ctx, addresses)
}

// SetExpiresOn mocks base method.
func (m *Mockstorage) SetExpiresOn(ctx context.Context, txHash common.Hash, expiresOn time.Time, releaser common.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpiresOn", ctx, txHash, expiresOn, releaser)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetExpiresOn indicates an expected call of SetExpiresOn.
func (mr *MockstorageMockRecorder) SetExpiresOn(ctx, txHash, expiresOn, releaser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpiresOn", reflect.TypeOf((*Mockstorage)(nil).SetExpiresOn), ctx, txHash, expiresOn, releaser)
}
